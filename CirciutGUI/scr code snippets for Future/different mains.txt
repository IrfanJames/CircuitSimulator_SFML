#include <iostream>

#ifdef _WIN32
#include <windows.h>
#endif

void runApplicationLogic() {
    // Your application logic goes here
    std::cout << "Running application logic..." << std::endl;
}

#ifdef _DEBUG
int main(int argc, char* argv[]) {
    runApplicationLogic();
    std::cin.get();
    return 0;
}
#else
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {
    runApplicationLogic();
    return 0;
}
#endif

//////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <sstream>
#include <windows.h>

// Application logic function that accepts command line arguments
void runApplicationLogic(int argc, char* argv[]) {
    // Process command line arguments here
    std::cout << "Command line arguments:" << std::endl;
    for (int i = 0; i < argc; ++i) {
        std::cout << argv[i] << std::endl;
    }
}

// Main entry point for console applications
int main(int argc, char* argv[]) {
    // Run application logic with command line arguments
    runApplicationLogic(argc, argv);

#ifdef _DEBUG
    std::cin.get();  // Pause console to see output
#endif
    return 0;
}

// Main entry point for Windows applications
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {
    // Parse the command line arguments
    std::istringstream iss(lpCmdLine);
    std::string arg;
    int argc = 0;
    while (std::getline(iss, arg, ' ')) {
        ++argc;
    }
    char** argv = new char*[argc];
    iss.clear();
    iss.seekg(0);
    for (int i = 0; std::getline(iss, arg, ' '); ++i) {
        argv[i] = new char[arg.size() + 1];
        std::strcpy(argv[i], arg.c_str());
    }

    // Run application logic with command line arguments
    runApplicationLogic(argc, argv);

#ifdef _DEBUG
    std::cin.get();  // Pause console to see output
#endif

    // Clean up dynamically allocated command line argument array
    for (int i = 0; i < argc; ++i) {
        delete[] argv[i];
    }
    delete[] argv;

    return 0;
}
